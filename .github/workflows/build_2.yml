name: build_2

on:
  # schedule:
  #   # daily build on UTC+8 7:30
  #   - cron:  '30 18 * * 2,5'
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device:
        description: 'select device to build'
        default: 'r4s'
        required: false
      branch:
        description: 'seleclt openwrt branch'
        default: 'master'
        required: false

jobs:

  build_packages_2:
    name: Build ${{ github.event.client_payload.device || github.event.inputs.device }} packages step 2
    runs-on: ubuntu-20.04
    env:
      DEVICE: ${{ github.event.client_payload.device || github.event.inputs.device }}
      BRANCH: ${{ github.event.client_payload.branch || github.event.inputs.branch }}
      TG: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    if: github.repository_owner=='aotsukiqx' 
    steps:    
      - name: Restore status
        run: |
          echo "PWD: $(pwd)"
          sudo apt update;
          sudo apt -y --no-upgrade --no-install-recommends install pv jq build-essential zstd xz-utils cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync swig
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          sudo sysctl vm.swappiness=0

          cd
          export AUTH="Authorization: token ${{ secrets.SEC_TOKEN }}"
          export cache_path='github.com/repos/aotsukiqx/nanopi-openwrt/releases'
          export cache_repo_id='56878497'
          for i in {1..20}
          do curl -sL --fail https://github.com/aotsukiqx/nanopi-openwrt/releases/download/ib_cache/mid.$DEVICE.zst.0$i || break
          done | zstdmt -d -o save.tar.gz.zst
          zstd -d save.tar.gz.zst -o save.tar.gz
          tar -zxvf save.tar.gz -C /
          cd ~
          echo "PWD: $(pwd)"
          zstdmt lede.img
          LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
          echo "losetup..."
          sudo losetup -P --direct-io $LOOP_DEVICE lede.img
          mkdir lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
             
      - name: Build and deploy packages
        run: |
          ulimit -SHn 65000
          cd ~/lede
          while true; do make download -j && break || true; done
          make -j$[`nproc`+1] IGNORE_ERRORS=1
          # for debug comment out above line and enable below
          # make -j1 V=s IGNORE_ERRORS=1
          if [ ! -e ~/lede/bin/targets/*/*/*imagebuilder*xz ]; then make V=sc; fi
          mv `ls ~/lede/bin/targets/*/*/*imagebuilder*xz` ~/ib-$DEVICE.tar.xz

          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          
      - name: Clean build cache
        if: ${{ github.event.client_payload.package_clean == 'true' }}
        run: |
          cd ~/lede
          df -h .
          make package/clean
          df -h .

      - name: Prepare artifact
        run: |
          cd
          mkdir -p ./artifact/buildinfo
          cd lede
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          cp -rf .config ../artifact/buildinfo/
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV
          rm -rf bin tmp
          cd ..
          mv artifact $GITHUB_WORKSPACE

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Save cache state
        run: |
          cd
          sleep 60
          sudo mount -o remount,compress=no,nodatacow,nodatasum lede
          cd lede/; pv /dev/zero > zerospace || true; sync; rm -f zerospace; cd -
          sleep 60
          sudo umount lede
          sudo losetup -d $LOOP_DEVICE
          export AUTH="Authorization: token ${{ secrets.SEC_TOKEN }}"
          export cache_path='github.com/repos/aotsukiqx/nanopi-openwrt/releases'
          export cache_repo_id='56878497'
          #zstdmt -c --adapt --long lede.img | parallel --wc --block 1.99G --pipe \
          #'curl -s --data-binary @- -H "$AUTH" -H "Content-Type: application/octet-stream" https://uploads.$cache_path/$cache_repo_id/assets?name=lede.'$DEVICE'.img.zst.0{#} > /dev/null'
          zstdmt -c --long lede.img | split --numeric=1 -b 2000m - lede.$DEVICE.img.zst.
          #for f in *img.zst*
          #do
          #  while true; do curl --data-binary @$f -H "$AUTH" -H 'Content-Type: application/octet-stream' "https://uploads.$cache_path/$cache_repo_id/assets?name=$f" && break || true; done
          #done
          while true; do
          ret=$(curl -sH "$AUTH" "https://api.$cache_path/tags/ib_cache")
          echo $ret | jq -r '.assets[] | select(.name | contains ("'$DEVICE'.img")).id' | \
          xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
          echo $ret | jq -r '.assets[] | select(.name == "ib-'$DEVICE'.tar.xz").id' | \
          xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
          ls *img.zst* ib-$DEVICE.tar.xz | parallel --wc 'while true; do curl -T {} -H "$AUTH" -H "Content-Type: application/octet-stream" "https://uploads.$cache_path/$cache_repo_id/assets?name={}" && break || true; done'
          set +e
          for i in {1..20}; do curl -sL --fail https://github.com/aotsukiqx/nanopi-openwrt/releases/download/ib_cache/lede.$DEVICE.img.zst.0$i || break; done | zstdmt -d -o /dev/null
          if [ $? -eq 0 ]; then break; fi
          done
          set -e

      - name: Send tg notification
        if: env.TG
        run: |
          curl -k --data chat_id="${{secrets.TELEGRAM_CHAT_ID}}" --data "text=The ${{env.DEVICE}} build ran completed at ${{job.status}}." "https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage"

      - name: Debug via tmate
        uses: klever1988/ssh2actions@main
        if: ${{ failure() && env.TG }}
        with:
          mode: ssh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SSH_PASSWORD: ${{secrets.SSH_PASSWORD}}
          SSH_PUBKEY: ${{secrets.SSH_PUBKEY}}
          NGROK_TOKEN: ${{secrets.TUNNEL_KEY}}
          TUNNEL_HOST: ${{secrets.TUNNEL_HOST}}